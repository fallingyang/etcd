syntax = "proto2";
package raftpb;

import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;

enum EntryType {
	EntryNormal     = 0; // 普通的数据操作
	EntryConfChange = 1; // 集群的变更操作
}
// 记录，每条记录对应raft的一个独立操作，每条消息可以传递多个记录
message Entry {
	optional uint64     Term  = 2 [(gogoproto.nullable) = false]; // must be 64-bit aligned for atomic operations // 该Entry所在的任期号
	optional uint64     Index = 3 [(gogoproto.nullable) = false]; // must be 64-bit aligned for atomic operations // 该Entry对应的索引号
	optional EntryType  Type  = 1 [(gogoproto.nullable) = false]; // 记录的类型
	optional bytes      Data  = 4; // 数据
}

message SnapshotMetadata {
	optional ConfState conf_state = 1 [(gogoproto.nullable) = false];
	optional uint64    index      = 2 [(gogoproto.nullable) = false];
	optional uint64    term       = 3 [(gogoproto.nullable) = false];
}

message Snapshot {
	optional bytes            data     = 1;
	optional SnapshotMetadata metadata = 2 [(gogoproto.nullable) = false];
}

enum MessageType {
	MsgHup             = 0;
	MsgBeat            = 1;
	MsgProp            = 2;
	MsgApp             = 3;
	MsgAppResp         = 4;
	MsgVote            = 5;
	MsgVoteResp        = 6;
	MsgSnap            = 7;
	MsgHeartbeat       = 8;
	MsgHeartbeatResp   = 9;
	MsgUnreachable     = 10;
	MsgSnapStatus      = 11;
	MsgCheckQuorum     = 12;
	MsgTransferLeader  = 13;
	MsgTimeoutNow      = 14;
	MsgReadIndex       = 15;
	MsgReadIndexResp   = 16;
	MsgPreVote         = 17;
	MsgPreVoteResp     = 18;
}

// 节点之间传递消息的统一封装
message Message {
	optional MessageType type        = 1  [(gogoproto.nullable) = false]; // 消息类型
	optional uint64      to          = 2  [(gogoproto.nullable) = false]; // 发送结点的ID
	optional uint64      from        = 3  [(gogoproto.nullable) = false]; // 目标结点的ID
	optional uint64      term        = 4  [(gogoproto.nullable) = false]; // 发送结点的任期号，0为本地消息，特殊处理
	optional uint64      logTerm     = 5  [(gogoproto.nullable) = false]; // 该消息携带的第一条记录的任期号
	optional uint64      index       = 6  [(gogoproto.nullable) = false]; // 索引值，根据消息类型的不同而不同
	repeated Entry       entries     = 7  [(gogoproto.nullable) = false]; // 记录
	optional uint64      commit      = 8  [(gogoproto.nullable) = false]; // 消息发送结点的提交位置
	optional Snapshot    snapshot    = 9  [(gogoproto.nullable) = false]; // 传输快照时，该字段保存快照数据
	optional bool        reject      = 10 [(gogoproto.nullable) = false]; // 用于响应，表示是否拒绝收到的消息
	optional uint64      rejectHint  = 11 [(gogoproto.nullable) = false]; // Follower节点拒绝Leader结点的消息之后，会在该字段记录一个Entry索引值供Leader结点使用。
	optional bytes       context     = 12; // 消息携带的一些上下文，如该消息是否与Leader节点转移相关。
}

message HardState {
	optional uint64 term   = 1 [(gogoproto.nullable) = false];
	optional uint64 vote   = 2 [(gogoproto.nullable) = false];
	optional uint64 commit = 3 [(gogoproto.nullable) = false];
}

message ConfState {
	repeated uint64 nodes    = 1;
	repeated uint64 learners = 2;
}

enum ConfChangeType {
	ConfChangeAddNode        = 0;
	ConfChangeRemoveNode     = 1;
	ConfChangeUpdateNode     = 2;
	ConfChangeAddLearnerNode = 3;
}

message ConfChange {
	optional uint64          ID      = 1 [(gogoproto.nullable) = false];
	optional ConfChangeType  Type    = 2 [(gogoproto.nullable) = false];
	optional uint64          NodeID  = 3 [(gogoproto.nullable) = false];
	optional bytes           Context = 4;
}
